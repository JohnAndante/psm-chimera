import * as cron from 'node-cron';
import { TelegramService } from '../services/telegram.service';
import { db } from '../factory/database.factory';
import { SyncJobService } from '../services/sync.job.service';
import { randomUUID } from 'crypto';

export class CronTestController {
    private static task: cron.ScheduledTask | null = null;
    private static isRunning = false;
    private static executionCount = 0;
    private static lastExecution: Date | null = null;
    private static testStoreId = '';
    private static testSyncConfigId = '';

    private telegramService = new TelegramService();
    private syncJobService = new SyncJobService();

    /**
     * Iniciar teste do cron - executa a cada minuto
     */
    static startCronTest(): void {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Teste do cron j√° est√° rodando');
            return;
        }

        console.log('üöÄ Iniciando teste do cron - execu√ß√£o a cada minuto');

        // Executa a cada minuto para teste
        this.task = cron.schedule('* * * * *', async () => {
            try {
                await this.executeCronTest();
            } catch (error) {
                console.error('‚ùå Erro no teste do cron:', error);
            }
        }, {
            timezone: "America/Sao_Paulo"
        });

        this.isRunning = true;
        console.log('‚úÖ Teste do cron iniciado - pr√≥xima execu√ß√£o em 1 minuto');
    }

    /**
     * Parar teste do cron
     */
    static stopCronTest(): void {
        if (this.task) {
            this.task.destroy();
            this.task = null;
            this.isRunning = false;
            console.log('‚èπÔ∏è Teste do cron parado');
        } else {
            console.log('‚ö†Ô∏è Teste do cron n√£o estava rodando');
        }
    }

    /**
     * Verificar status do teste
     */
    static getCronTestStatus(): { running: boolean; nextExecution?: string } {
        return {
            running: this.isRunning,
            nextExecution: this.isRunning ? 'Pr√≥ximo minuto' : undefined
        };
    }

    /**
     * Fun√ß√£o que executa no cron de teste
     */
    private static async executeCronTest(): Promise<void> {
        const now = new Date();
        const timestamp = now.toLocaleString('pt-BR', {
            timeZone: 'America/Sao_Paulo',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        this.executionCount++;
        this.lastExecution = now;

        console.log(`üïê [CRON TEST #${this.executionCount}] Executando teste √†s ${timestamp}`);

        try {
            // Teste 1: Verificar conex√£o com banco
            const storesCount = await db.selectFrom('stores')
                .select((eb) => eb.fn.count('id').as('count'))
                .executeTakeFirst();

            // Teste 2: Verificar se h√° integra√ß√µes configuradas
            const integrationsCount = await db.selectFrom('integrations')
                .select((eb) => eb.fn.count('id').as('count'))
                .where('active', '=', true)
                .executeTakeFirst();

            // Teste 3: Verificar canais de notifica√ß√£o
            const notificationChannelsCount = await db.selectFrom('notification_channels')
                .select((eb) => eb.fn.count('id').as('count'))
                .where('active', '=', true)
                .executeTakeFirst();

            // Teste 4: Verificar configura√ß√µes de sincroniza√ß√£o ativas
            const syncConfigsCount = await db.selectFrom('sync_configurations')
                .select((eb) => eb.fn.count('id').as('count'))
                .where('active', '=', true)
                .executeTakeFirst();

            const testResults: any = {
                execution: this.executionCount,
                timestamp,
                database: {
                    stores: Number(storesCount?.count || 0),
                    integrations: Number(integrationsCount?.count || 0),
                    notification_channels: Number(notificationChannelsCount?.count || 0),
                    sync_configurations: Number(syncConfigsCount?.count || 0)
                },
                system: {
                    memory: process.memoryUsage(),
                    uptime: process.uptime()
                }
            };

            console.log('üìä [CRON TEST] Resultados:', JSON.stringify(testResults, null, 2));

            // A cada 3 execu√ß√µes, executar teste de sincroniza√ß√£o real
            if (this.executionCount % 3 === 0) {
                console.log('üîÑ [CRON TEST] Executando teste de sincroniza√ß√£o real...');
                try {
                    await this.executeTestSync();
                    testResults.sync_test = { success: true, message: 'Sincroniza√ß√£o executada com sucesso' };
                } catch (syncError) {
                    console.error('‚ùå [CRON TEST] Erro na sincroniza√ß√£o:', syncError);
                    const errorMessage = syncError instanceof Error ? syncError.message : 'Erro desconhecido';
                    testResults.sync_test = { success: false, error: errorMessage };
                }
            }

            // Enviar notifica√ß√£o de teste via Telegram (se configurado)
            await this.sendTestNotification(testResults);

        } catch (error) {
            console.error('‚ùå [CRON TEST] Erro durante execu√ß√£o:', error);

            // Tentar enviar notifica√ß√£o de erro
            try {
                await this.sendErrorNotification(error);
            } catch (notificationError) {
                console.error('‚ùå [CRON TEST] Erro ao enviar notifica√ß√£o:', notificationError);
            }
        }
    }

    /**
     * Enviar notifica√ß√£o de teste via Telegram
     */
    private static async sendTestNotification(results: any): Promise<void> {
        try {
            // Buscar primeiro canal de notifica√ß√£o ativo para teste
            const notificationChannel = await db.selectFrom('notification_channels')
                .selectAll()
                .where('active', '=', true)
                .where('type', '=', 'TELEGRAM')
                .executeTakeFirst();

            if (!notificationChannel) {
                console.log('‚ö†Ô∏è [CRON TEST] Nenhum canal Telegram configurado para teste');
                return;
            }

            const telegramService = new TelegramService(notificationChannel.config as any);

            let message = `üß™ **TESTE DO CRON #${results.execution}**\n\n` +
                `‚è∞ **Executado √†s:** ${results.timestamp}\n\n` +
                `üìä **Status do Sistema:**\n` +
                `‚Ä¢ Lojas: ${results.database.stores}\n` +
                `‚Ä¢ Integra√ß√µes ativas: ${results.database.integrations}\n` +
                `‚Ä¢ Canais de notifica√ß√£o: ${results.database.notification_channels}\n` +
                `‚Ä¢ Configura√ß√µes de sync: ${results.database.sync_configurations}\n\n` +
                `üíæ **Mem√≥ria:** ${Math.round(results.system.memory.heapUsed / 1024 / 1024)}MB\n` +
                `‚è±Ô∏è **Uptime:** ${Math.round(results.system.uptime / 60)} minutos\n\n`;

            // Adicionar informa√ß√µes de teste de sincroniza√ß√£o se dispon√≠vel
            if (results.sync_test) {
                if (results.sync_test.success) {
                    message += `üîÑ **Teste de Sincroniza√ß√£o:** ‚úÖ ${results.sync_test.message}\n\n`;
                } else {
                    message += `üîÑ **Teste de Sincroniza√ß√£o:** ‚ùå ${results.sync_test.error}\n\n`;
                }
            }

            message += `‚úÖ Cron funcionando perfeitamente!`;

            await telegramService.sendFormattedMessage({
                text: message,
                parse_mode: 'Markdown'
            });
            console.log('üì§ [CRON TEST] Notifica√ß√£o enviada via Telegram');

        } catch (error: any) {
            if (error.message?.includes('chat not found')) {
                console.error('‚ö†Ô∏è [CRON TEST] Chat do Telegram n√£o encontrado - verifique se o bot est√° no grupo');
            } else if (error.message?.includes('bot was blocked')) {
                console.error('‚ö†Ô∏è [CRON TEST] Bot foi bloqueado no Telegram');
            } else {
                console.error('‚ùå [CRON TEST] Erro ao enviar notifica√ß√£o:', error.message || error);
            }
        }
    }

    /**
     * Enviar notifica√ß√£o de erro via Telegram
     */
    private static async sendErrorNotification(error: any): Promise<void> {
        try {
            const notificationChannel = await db.selectFrom('notification_channels')
                .selectAll()
                .where('active', '=', true)
                .where('type', '=', 'TELEGRAM')
                .executeTakeFirst();

            if (!notificationChannel) return;

            const telegramService = new TelegramService(notificationChannel.config as any);

            const message = `‚ùå **ERRO NO TESTE DO CRON**\n\n` +
                `‚è∞ **Hor√°rio:** ${new Date().toLocaleString('pt-BR')}\n\n` +
                `üö® **Erro:** ${error.message || 'Erro desconhecido'}\n\n` +
                `Verifique os logs para mais detalhes.`;

            await telegramService.sendFormattedMessage({
                text: message,
                parse_mode: 'Markdown'
            });

        } catch (notificationError) {
            // Se n√£o conseguir enviar notifica√ß√£o, apenas loga
            console.error('‚ùå [CRON TEST] Falha ao enviar notifica√ß√£o de erro:', notificationError);
        }
    }

    /**
     * Executar teste √∫nico (n√£o agendado)
     */
    static async runSingleTest(): Promise<any> {
        console.log('üß™ Executando teste √∫nico do cron...');
        await this.executeCronTest();
        return { success: true, message: 'Teste executado com sucesso' };
    }

    /**
     * Criar configura√ß√£o de sincroniza√ß√£o de teste
     * Este m√©todo cria uma configura√ß√£o tempor√°ria para testar o fluxo completo
     */
    static async createTestSyncConfig(): Promise<{ storeId: number; syncConfigId: number }> {
        console.log('üè≠ Criando configura√ß√£o de teste...');

        try {
            // 1. Buscar integra√ß√µes dispon√≠veis (mais flex√≠vel)
            const integrations = await db.selectFrom('integrations')
                .selectAll()
                .where('active', '=', true)
                .limit(2)
                .execute();

            // Se n√£o h√° integra√ß√µes, criar integra√ß√µes de teste
            let sourceIntegration, targetIntegration;

            if (integrations.length >= 2) {
                sourceIntegration = integrations[0];
                targetIntegration = integrations[1];
            } else {
                // Criar integra√ß√µes de teste tempor√°rias
                console.log('‚ö†Ô∏è Criando integra√ß√µes de teste tempor√°rias...');

                const sourceResult = await db.insertInto('integrations')
                    .values({
                        name: 'TESTE_SOURCE_INTEGRATION',
                        type: 'RP',
                        base_url: 'https://teste-source.com',
                        email: null,
                        password: null,
                        config: { test_mode: true },
                        active: true,
                        created_at: new Date(),
                        updated_at: new Date(),
                        deleted_at: null
                    } as any)
                    .returning('id')
                    .executeTakeFirst();

                const targetResult = await db.insertInto('integrations')
                    .values({
                        name: 'TESTE_TARGET_INTEGRATION',
                        type: 'CRESCEVENDAS',
                        base_url: 'https://teste-target.com',
                        email: null,
                        password: null,
                        config: { test_mode: true },
                        active: true,
                        created_at: new Date(),
                        updated_at: new Date(),
                        deleted_at: null
                    } as any)
                    .returning('id')
                    .executeTakeFirst();

                sourceIntegration = await db.selectFrom('integrations')
                    .selectAll()
                    .where('id', '=', sourceResult!.id)
                    .executeTakeFirstOrThrow();

                targetIntegration = await db.selectFrom('integrations')
                    .selectAll()
                    .where('id', '=', targetResult!.id)
                    .executeTakeFirstOrThrow();
            }

            // 2. Verificar se j√° existe configura√ß√£o de teste
            let testSyncConfig = await db.selectFrom('sync_configurations')
                .selectAll()
                .where('name', '=', 'TESTE_CRON_AUTO')
                .executeTakeFirst();

            if (!testSyncConfig) {
                // Criar nova configura√ß√£o de sincroniza√ß√£o de teste
                const insertResult = await db.insertInto('sync_configurations')
                    .values({
                        name: 'TESTE_CRON_AUTO',
                        description: 'Configura√ß√£o autom√°tica para teste do cron',
                        source_integration_id: sourceIntegration.id!,
                        target_integration_id: targetIntegration.id!,
                        notification_channel_id: null,
                        store_ids: [],
                        schedule: {
                            sync_time: "05:00",
                            compare_time: "05:30"
                        },
                        options: {
                            test_mode: true,
                            max_stores: 2,
                            max_products_per_store: 5,
                            timeout_minutes: 2
                        },
                        active: true,
                        created_at: new Date(),
                        updated_at: new Date(),
                        deleted_at: null
                    } as any)
                    .returning('id')
                    .executeTakeFirstOrThrow();

                testSyncConfig = await db.selectFrom('sync_configurations')
                    .selectAll()
                    .where('id', '=', insertResult.id)
                    .executeTakeFirstOrThrow();

                console.log('‚úÖ Configura√ß√£o de sincroniza√ß√£o de teste criada');
            } else {
                console.log('‚úÖ Usando configura√ß√£o de teste existente');
            }

            // 3. Buscar algumas lojas para o teste
            const testStores = await db.selectFrom('stores')
                .selectAll()
                .where('active', '=', true)
                .limit(2)
                .execute();

            console.log(`üìä Sync Config ID: ${testSyncConfig.id}`);
            console.log(`üîÑ Source Integration: ${sourceIntegration.name}`);
            console.log(`üîÑ Target Integration: ${targetIntegration.name}`);
            console.log(`‚è∞ Schedule: A cada 3 minutos`);
            console.log(`üè™ Lojas dispon√≠veis: ${testStores.length}`);

            this.testSyncConfigId = String(testSyncConfig.id);

            return {
                storeId: testStores[0]?.id || 0,
                syncConfigId: testSyncConfig.id
            };

        } catch (error) {
            console.error('‚ùå Erro ao criar configura√ß√£o de teste:', error);
            throw error;
        }
    }

    /**
     * Executar sincroniza√ß√£o de teste usando configura√ß√£o real
     */
    static async executeTestSync(): Promise<void> {
        console.log('üîÑ Executando sincroniza√ß√£o de teste...');

        try {
            // Se n√£o temos configura√ß√£o de teste, criar uma
            if (!this.testSyncConfigId) {
                await this.createTestSyncConfig();
            }

            // Buscar a configura√ß√£o de teste
            const syncConfig = await db.selectFrom('sync_configurations')
                .selectAll()
                .where('id', '=', Number(this.testSyncConfigId))
                .executeTakeFirst();

            if (!syncConfig) {
                console.log('‚ö†Ô∏è Configura√ß√£o de teste n√£o encontrada, criando nova...');
                await this.createTestSyncConfig();
                return;
            }

            console.log(`üöÄ Executando sincroniza√ß√£o config ${syncConfig.id}: ${syncConfig.name}`);

            // Buscar algumas lojas para o teste
            const stores = await db.selectFrom('stores')
                .selectAll()
                .where('active', '=', true)
                .limit(2)
                .execute();

            if (stores.length === 0) {
                console.log('‚ö†Ô∏è Nenhuma loja ativa encontrada para teste');
                return;
            }

            // Verificar se as integra√ß√µes s√£o de teste
            const isTestMode = syncConfig.name === 'TESTE_CRON_AUTO';

            if (isTestMode) {
                // Simular execu√ß√£o para modo de teste
                console.log('üé≠ Simulando sincroniza√ß√£o em modo de teste...');

                // Criar registro de execu√ß√£o simulada
                const executionId = randomUUID();
                const startTime = new Date();

                const storesProcessed = stores.map(s => ({
                    store_id: s.id,
                    store_name: s.name,
                    products_synced: 0,
                    status: 'SIMULATED',
                    execution_time: 100
                }));

                const summary = {
                    total_stores: stores.length,
                    successful_stores: stores.length,
                    failed_stores: 0,
                    total_products: 0,
                    execution_time: 100,
                    simulation: true,
                    test_mode: true
                };

                await db.insertInto('sync_executions')
                    .values({
                        id: executionId,
                        sync_config_id: syncConfig.id,
                        status: 'SUCCESS',
                        started_at: startTime,
                        finished_at: new Date(),
                        stores_processed: JSON.stringify(storesProcessed),
                        summary: JSON.stringify(summary),
                        comparison_results: null,
                        execution_logs: `Execu√ß√£o simulada de teste - ${stores.length} lojas processadas`,
                        error_details: null,
                        created_at: new Date()
                    } as any)
                    .execute();

                console.log('‚úÖ Sincroniza√ß√£o simulada executada:', {
                    execution_id: executionId,
                    status: 'SUCCESS',
                    stores_simulated: stores.length,
                    mode: 'SIMULATION'
                });
            } else {
                // Executar sincroniza√ß√£o real apenas se n√£o for teste
                const syncJobService = new SyncJobService();

                const result = await syncJobService.executeSyncJob({
                    sync_config_id: syncConfig.id,
                    source_integration_id: syncConfig.source_integration_id,
                    target_integration_id: syncConfig.target_integration_id,
                    store_ids: stores.slice(0, 1).map(s => s.id!), // Apenas primeira loja para teste
                    options: {
                        force_sync: false,
                        skip_comparison: false
                    }
                });

                console.log('‚úÖ Sincroniza√ß√£o real executada:', {
                    execution_id: result.execution_id,
                    status: result.status,
                    total_stores: result.summary.total_stores,
                    stores_processed: result.stores_processed?.length || 0
                });
            }

            // Buscar estat√≠sticas das √∫ltimas execu√ß√µes
            const recentExecutions = await db.selectFrom('sync_executions')
                .selectAll()
                .where('sync_config_id', '=', syncConfig.id)
                .orderBy('started_at', 'desc')
                .limit(3)
                .execute();

            console.log(`üìä √öltimas ${recentExecutions.length} execu√ß√µes:`,
                recentExecutions.map(exec => ({
                    id: exec.id,
                    status: exec.status,
                    started_at: exec.started_at,
                    finished_at: exec.finished_at
                }))
            );

        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o de teste:', error);
            throw error;
        }
    }

    /**
     * Limpar dados de teste
     */
    static async cleanupTestData(): Promise<void> {
        console.log('üßπ Limpando dados de teste...');

        try {
            // Remover configura√ß√£o de sincroniza√ß√£o de teste
            if (this.testSyncConfigId) {
                await db.deleteFrom('sync_configurations')
                    .where('id', '=', Number(this.testSyncConfigId))
                    .execute();
                console.log('‚úÖ Configura√ß√£o de sincroniza√ß√£o de teste removida');
            }

            // Remover integra√ß√µes de teste tempor√°rias
            await db.deleteFrom('integrations')
                .where('name', 'in', ['TESTE_SOURCE_INTEGRATION', 'TESTE_TARGET_INTEGRATION'])
                .execute();
            console.log('‚úÖ Integra√ß√µes de teste removidas');

            // Limpar IDs
            this.testSyncConfigId = '';

            console.log('‚úÖ Limpeza conclu√≠da');

        } catch (error) {
            console.error('‚ùå Erro na limpeza:', error);
            throw error;
        }
    }
}
